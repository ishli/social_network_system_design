openapi: 3.0.3
info:
  title: Swagger VK - OpenAPI 3.0
  description: |-
   
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://vk.swagger.io/api/v1
tags:
  - name: friends
    description: Друзья
  - name: user profile
    description: Профиль пользователя
  - name: feed
    description: Лента
  - name: files
    description: Файлы пользователя
  - name: chat
    description: Чаты
paths:
  /friends/{friendId}:
    post:
      tags:
        - friends
      summary: Add a new friend
      description: Add a new friend
      operationId: addFriend
      parameters:
        - name: friendId
          in: path
          description: ID of friend
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
        '400':
          description: Invalid friend ID
        '404':
          description: Friend not found
        '500':
          description: Server error. Please, call to +123456
      security:
        - vk_auth:
            - write:all
            - read:all
    delete:
      tags:
        - friends
      summary: Deletes the friend
      description: delete the friend
      operationId: deleteFriend
      parameters:
        - name: friendId
          in: path
          description: Friend id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid friend value
        '404':
          description: Friend not found
        '500':
          description: Server error. Please, call to +123456
      security:
        - vk_auth:
            - vk_auth:all
            - vk_auth:all
  /friends/{userId}:
    get:
      tags:
        - friends
      summary: user friends
      description: Get user friends
      operationId: GetUserFriends
      parameters:
        - name: userId
          in: path
          description: ID of userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friends'          
        '400':
          description: Invalid user ID
        '404':
          description: userId not found
        '500':
          description: Server error. Please, call to +123456
      security:
        - vk_auth:
            - write:all
            - read:all
  /profile/{userId}:
    get:
      tags:
        - user profile
      summary: user profile
      description: Get user profile
      operationId: GetUserProfile
      parameters:
        - name: userId
          in: path
          description: ID of userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friend'          
        '400':
          description: Invalid user ID
        '404':
          description: userId not found
        '500':
          description: Server error. Please, call to +123456
      security:
        - vk_auth:
            - write:all
            - read:all            
  /feed/add:
    post:
      tags:
        - feed
      summary: Add a new post to feed
      description: Add a new post to feed
      operationId: addPostToFeed
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
        '400':
          description: Invalid params
        '500':
          description: Server error. Please, call to +123456
      security:
        - vk_auth:
            - write:all
            - read:all
  /files/add:
    post:
      tags:
        - files
      summary: Add a new file
      description: Add a new file
      operationId: addNewFile
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
        '400':
          description: Invalid params
        '500':
          description: Server error. Please, call to +123456
      security:
        - vk_auth:
            - write:all
            - read:all
  /feed/{userId}:
    get:
      tags:
        - feed
      summary: user feed
      description: Get user feed
      operationId: GetUserFeed
      parameters:
        - name: userId
          in: path
          description: ID of userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'          
        '400':
          description: Invalid user ID
        '404':
          description: userId not found
        '500':
          description: Server error. Please, call to +123456
      security:
        - vk_auth:
            - write:all
            - read:all               
  /chat/{userId}/all:
    get:
      tags:
        - chat
      summary: get user chats
      description: Get user chats
      operationId: GetUserChats
      parameters:
        - name: userId
          in: path
          description: ID of userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chats'          
        '400':
          description: Invalid user ID
        '404':
          description: userId not found
        '500':
          description: Server error. Please, call to +123456
      security:
        - vk_auth:
            - write:all
            - read:all  
  /chat/{userId}/{chatId}:
    get:
      tags:
        - chat
      summary: get user chat by Id
      description: Get user chat by Id
      operationId: GetUserChat
      parameters:
        - name: userId
          in: path
          description: ID of userId
          required: true
          schema:
            type: integer
            format: int64
        - name: chatId
          in: path
          description: ID of chat
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessages'          
        '400':
          description: Invalid user ID
        '404':
          description: userId not found
        '500':
          description: Server error. Please, call to +123456
      security:
        - vk_auth:
            - write:all
            - read:all             
    post:
      tags:
        - chat
      summary: Add a new message to chat
      description: Add a new message to chat
      operationId: addMessageToChat
      parameters:
        - name: userId
          in: path
          description: ID of userId
          required: true
          schema:
            type: integer
            format: int64
        - name: chatId
          in: path
          description: ID of chat
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Created message object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessage'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
        '400':
          description: Invalid params
        '500':
          description: Server error. Please, call to +123456
      security:
        - vk_auth:
            - write:all
            - read:all            

components:
  schemas:
    Friends:
      type: array
      items:
        $ref: '#/components/schemas/Friend'
    Friend:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Oleg
        photoUrl:
          type: string
    Posts:
      type: array
      items:
        $ref: '#/components/schemas/Post'
    Post:
      required:
        - text
        - attachedPhotoUrl
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        text:
          type: string
          example: bla bla bla bla
        attachedPhotoUrl:
          type: string
    Chats:
      type: array
      items:
        $ref: '#/components/schemas/Chat'
    Chat:
      required:
        - lastMessage
        - chatAvatar
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        lastMessage:
          type: string
          example: All you need is loan...
        chatAvatar:
          type: string
    ChatMessages:
      type: array
      items:
        $ref: '#/components/schemas/ChatMessage'
    ChatMessage:
      required:
        - message
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        message:
          type: string
          example: All you need is loan, bro)
        attachedImageUrl:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  securitySchemes:
    vk_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://vk.swagger.io/oauth/authorize
          scopes:
            write:all: modify all in your account
            read:all: read all
