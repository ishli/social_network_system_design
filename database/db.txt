// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs
Table users {
  user_id integer [primary key]
  name varchar
  city varchar
  user_min_foto_url varchar
  minimal_info json // минимальная информация
}

// можно в отдельную document DB
Table user_data {
  user_id integer [primary key]
  user_foto_url varchar
  description text
  city varchar
  interests text
  relation_status user_relation_status
  love_user_id integer
}

Enum user_relation_status {
  "none"
  "all bad"
  "love"
}

// я предположил, что списки друзей и подписчиков можно 
// просто хранить в json и иногда в отдельном джобе доставать
// для поиска возможных друзей
Table user_relations {
  user_id integer [primary key]
  friends json // {"data": [{"userId":1},...,{"userId":111}]}
  followers json // {"data": [{"userId":1},...,{"userId":111}]}
}

// comments - это Json с 
// названиями файлов (названия формируются по алгоритму вида Post_id, chunk_id) 
// на каком-то специальном сервере для комментариев,
// каждый файл хранит часть последовательности комментариев в виде Json.
// При просмотре поста, клиент передает на сервер список названий 
// файлов с комментариями, получает их и строит на клиенте.
Table posts {
  id integer [primary key]
  user_id integer
  title varchar
  body text
  created_at timestamp
  likes_count integer
  views_count integer
  hash_tags text
  comments json // {"chunks": ["121_1","121_2"]}
  media json // {"data":["media_url_1","media_url_2"]}
}

Table user_chats {
   id integer [primary key]
   user_id interger
   chat_id interger
}

// messages - это Json с 
// названиями файлов (названия формируются по алгоритму вида chat_id, chunk_id) 
// на каком-то специальном сервере для комментариев,
// каждый файл хранит часть последовательности сообщений в виде Json (текст сообщения, прочитанность, реакции и т.д.).
// При просмотре поста, клиент передает на сервер список названий 
// файлов с комментариями, получает их и строит на клиенте.
Table chats {
  id integer [primary key]
  chat_id integer [primary key]
  title varchar
  chat_type chat_type
  to_user_id integer
  messages json //{"chunks": ["121_1","121_2"]}
}

Enum chat_type {
  "chat"
  "private"
}

// файловое хранилище, скорее обычный файл с закодированным именем
Table media {
  url varchar
  owner_id interger
  type media_type
}


Table user_media {
  id integer [primary key]
  user_id interger
  url varchar
  type media_type
}

Enum media_type {
  "photo"
  "video"
  "audio"
}



Ref: "user_data"."user_id" - "users"."user_id"

Ref: "user_relations"."user_id" - "users"."user_id"

Ref: "users"."user_id" < "user_chats"."id"

Ref: "users"."user_id" < "posts"."user_id"

Ref: "users"."user_id" < "user_media"."user_id"

Ref: "user_media"."url" - "media"."url"

Ref: "chats"."chat_id" - "user_chats"."chat_id"